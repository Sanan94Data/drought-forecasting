# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M2UqMHfxb6dTEb7X4JUV55_yZWt3_ssb
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load datasets
precip_df = pd.read_csv('CHIRPS_Monthly_Prairies_2012_2022.csv')
evapo_df = pd.read_csv('ERA5_Evapotranspiration_Prairies_2012_2022.csv')
pdsi_df = pd.read_csv('PDSI_TerraClimate_Prairies_2012_2022.csv')

import pandas as pd

# Reload the CHIRPS dataset after state reset
chirps_2012_2022 = pd.read_csv("CHIRPS_Monthly_Prairies_2012_2022.csv")

# Display the first few rows and dataset size
chirps_2012_2022.head(), chirps_2012_2022.shape

# Clean the CHIRPS dataframe: keep only relevant columns
chirps_2012_2022_clean = chirps_2012_2022[['year', 'month', 'mean_precip_mm']]

# Display cleaned head and confirm columns
chirps_2012_2022_clean.head(), chirps_2012_2022_clean.shape

# Load the uploaded ERA5 evapotranspiration data
era5_2012_2022 = pd.read_csv("ERA5_Evapotranspiration_Prairies_2012_2022.csv")

# Display the first few rows and check the number of rows
era5_2012_2022.head(), era5_2012_2022.shape

# Re-import pandas after kernel reset
import pandas as pd

# Load the uploaded ERA5 evapotranspiration file
era5_2012_2022 = pd.read_csv("ERA5_Evapotranspiration_Prairies_2012_2022.csv")

# Display the first few rows and shape
era5_2012_2022.head(), era5_2012_2022.shape

# Clean ERA5 evapotranspiration data
era5_2012_2022['evap_mm'] = era5_2012_2022['evap_mm'].abs()
era5_2012_2022_clean = era5_2012_2022[['year', 'month', 'evap_mm']]

# Display cleaned result
era5_2012_2022_clean.head()

# Load the previously cleaned CHIRPS file (2012â€“2022)
chirps_path = "CHIRPS_Monthly_Prairies_2012_2022.csv"
chirps_df = pd.read_csv(chirps_path)[['year', 'month', 'mean_precip_mm']]

# Merge CHIRPS and ERA5 on year and month
climate_features_df = pd.merge(chirps_df, era5_2012_2022_clean, on=['year', 'month'])

# Show merged dataset
climate_features_df.head()

# Load the uploaded PDSI dataset
pdsi_2012_2022 = pd.read_csv("PDSI_TerraClimate_Prairies_2012_2022.csv")

# Display the first few rows and dataset shape
pdsi_2012_2022.head(), pdsi_2012_2022.shape

# Clean and scale the PDSI values
pdsi_2012_2022['pdsi'] = pdsi_2012_2022['pdsi'] / 100
pdsi_2012_2022['drought_label'] = pdsi_2012_2022['pdsi'].apply(lambda x: 1 if x < -1 else 0)

# Keep only relevant columns
pdsi_clean = pdsi_2012_2022[['year', 'month', 'pdsi', 'drought_label']]

# Display cleaned PDSI data
pdsi_clean.head()

# Merge climate features with PDSI + drought label
final_dataset = pd.merge(climate_features_df, pdsi_clean, on=['year', 'month'])

final_dataset.head()

# Update drought_label: 1 if pdsi < -0.5, else 0
final_dataset['drought_label'] = final_dataset['pdsi'].apply(lambda x: 1 if x < -0.5 else 0)

# Display updated dataset with new threshold
final_dataset.head()

# Summary statistics for continuous variables
summary_stats = final_dataset[['mean_precip_mm', 'evap_mm', 'pdsi']].describe().T
summary_stats = summary_stats.rename(columns={
    '50%': 'median'
})[['count', 'mean', 'std', 'min', '25%', 'median', '75%', 'max']]

print("ðŸ“Š Summary Statistics for Climate Variables:\n")
print(summary_stats)

# Drought label distribution
drought_counts = final_dataset['drought_label'].value_counts()
drought_percent = final_dataset['drought_label'].value_counts(normalize=True) * 100

print("\nðŸŸ  Drought Label Distribution:")
print(f"No Drought (0): {drought_counts[0]} ({drought_percent[0]:.2f}%)")
print(f"Drought (1): {drought_counts[1]} ({drought_percent[1]:.2f}%)")

import matplotlib.pyplot as plt
import seaborn as sns

# Select only relevant numeric columns
corr_matrix = final_dataset[['mean_precip_mm', 'evap_mm', 'pdsi']].corr()

# Set up the matplotlib figure
plt.figure(figsize=(8, 6))

# Create the heatmap
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", square=True,
            cbar_kws={'label': 'Pearson Correlation'})

# Add title
plt.title('Correlation Heatmap: Precipitation, Evapotranspiration, and PDSI')

# Show plot
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

fig, axs = plt.subplots(1, 3, figsize=(18, 5))

sns.boxplot(y=final_dataset['mean_precip_mm'], ax=axs[0], color='skyblue')
axs[0].set_title("Boxplot: Precipitation")

sns.boxplot(y=final_dataset['evap_mm'], ax=axs[1], color='lightgreen')
axs[1].set_title("Boxplot: Evapotranspiration")

sns.boxplot(y=final_dataset['pdsi'], ax=axs[2], color='salmon')
axs[2].set_title("Boxplot: PDSI")

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Set plot style
sns.set(style="whitegrid")

# Create histograms with KDE for each variable
fig, axs = plt.subplots(1, 3, figsize=(18, 5))

sns.histplot(final_dataset['mean_precip_mm'], kde=True, ax=axs[0], color='skyblue')
axs[0].set_title("Distribution of Precipitation (mm)")

sns.histplot(final_dataset['evap_mm'], kde=True, ax=axs[1], color='lightgreen')
axs[1].set_title("Distribution of Evapotranspiration (mm)")

sns.histplot(final_dataset['pdsi'], kde=True, ax=axs[2], color='salmon')
axs[2].set_title("Distribution of PDSI")

plt.tight_layout()
plt.show()
plt.savefig("histkde.png", dpi=300)

import matplotlib.pyplot as plt
import seaborn as sns

# Ensure correct time formatting
final_dataset['year'] = final_dataset['year'].astype(int)
final_dataset['month'] = final_dataset['month'].astype(int)
final_dataset['date'] = pd.to_datetime(final_dataset[['year', 'month']].assign(day=1))

# Set visual style
sns.set(style='whitegrid')

# --- 3.4.1: Precipitation ---
plt.figure(figsize=(12, 5))
sns.lineplot(data=final_dataset, x='date', y='mean_precip_mm')
plt.title('Monthly Precipitation (CHIRPS) â€“ May to Sept, 2012â€“2022')
plt.xlabel('Date')
plt.ylabel('Precipitation (mm)')
plt.tight_layout()
plt.show()

# --- 3.4.2: Evapotranspiration ---
plt.figure(figsize=(12, 5))
sns.lineplot(data=final_dataset, x='date', y='evap_mm')
plt.title('Monthly Evapotranspiration (ERA5-Land) â€“ May to Sept, 2012â€“2022')
plt.xlabel('Date')
plt.ylabel('Evapotranspiration (mm)')
plt.tight_layout()
plt.show()

# --- 3.4.3: PDSI ---
plt.figure(figsize=(12, 5))
sns.lineplot(data=final_dataset, x='date', y='pdsi')
plt.title('Monthly Palmer Drought Severity Index (PDSI) â€“ May to Sept, 2012â€“2022')
plt.axhline(-0.5, color='red', linestyle='--', label='Drought Threshold (PDSI = -0.5)')
plt.xlabel('Date')
plt.ylabel('PDSI')
plt.legend()
plt.tight_layout()
plt.show()

# --- 3.4.4: Drought Count Per Year ---
drought_counts = final_dataset.groupby('year')['drought_label'].sum().reset_index()

plt.figure(figsize=(10, 5))
sns.barplot(data=drought_counts, x='year', y='drought_label', palette='Blues_d')
plt.title('Number of Drought Months per Year (PDSI < -0.5)')
plt.xlabel('Year')
plt.ylabel('Count of Drought Months (Mayâ€“Sept)')
plt.tight_layout()
plt.show()

